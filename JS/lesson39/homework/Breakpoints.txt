Отладка в браузере

Отладка – это процесс поиска и исправления ошибок в скрипте. Все современные браузеры и большинство других сред разработки поддерживают инструменты для отладки – специальный графический интерфейс, который сильно упрощает отладку. 


Панель «Исходный код» («Sources»)

Интерфейс состоит из трёх зон:

-- В зоне File Navigator (панель для навигации файлов) показаны файлы HTML, JavaScript, CSS, включая изображения, используемые на странице. Здесь также могут быть файлы различных расширений Chrome.
-- Зона Code Editor (редактор кода) показывает исходный код.
-- Зона JavaScript Debugging (панель отладки JavaScript) отведена для отладки.


Точки останова (breakpoints)

Точка останова – это участок кода, где отладчик автоматически приостановит исполнение JavaScript.

Пока исполнение поставлено «на паузу», мы можем просмотреть текущие значения переменных, выполнить команды в консоли, другими словами, выполнить отладку кода.

В правой части графического интерфейса мы видим список точек останова. А когда таких точек выставлено много, да ещё и в разных файлах, этот список поможет эффективно ими управлять:

Быстро перейдите к точке останова в коде (нажав на неё на правой панели).
Временно отключите точку останова, сняв с неё галочку.
Удалите точку останова, щёлкнув правой кнопкой мыши и выбрав Remove (Удалить).


Команда debugger

Выполнение кода можно также приостановить с помощью команды debugger прямо изнутри самого кода:

Watch– показывает текущие значения для любых выражений.

Вы можете нажать на + и ввести выражение. Отладчик покажет его значение, автоматически пересчитывая его в процессе выполнения.

Call Stack – показывает цепочку вложенных вызовов.

Если вы нажмёте на элемент стека (например, «anonymous»), отладчик перейдёт к соответствующему коду, и нам представляется возможность его проанализировать.

Scope показывает текущие переменные.

Local показывает локальные переменные функций, а их значения подсвечены прямо в исходном коде.

В Global перечисляются глобальные переменные (то есть вне каких-либо функций).


Пошаговое выполнение скрипта

Для этого есть кнопки в верхней части правой панели. Давайте рассмотрим их.

 – «Resume»: продолжить выполнение, быстрая клавиша F8.
Возобновляет выполнение кода. Если больше нет точек останова, то выполнение просто продолжается, без контроля отладчиком.

 – «Step»: выполнить следующую команду, быстрая клавиша F9.
Выполняет следующую инструкцию. Если мы нажмём на неё сейчас, появится alert.

Нажатие на эту кнопку снова и снова приведёт к пошаговому выполнению всех инструкций скрипта одного за другим.

 – «Step over»: выполнить следующую команду, но не заходя внутрь функции, быстрая клавиша F10.

Если сравнить, то команда «Step» переходит во вложенный вызов функцию и приостанавливает выполнение в первой строке, в то время как «Step over» выполняет вызов вложенной функции незаметно для нас, пропуская её внутренний код.

 – «Step into», быстрая клавиша F11.
Это похоже на «Step», но ведёт себя по-другому в случае асинхронных вызовов функций. Если вы только начинаете изучать JavaScript, то можете не обращать внимания на разницу, так как у нас ещё нет асинхронных вызовов.

 – «Step out»: продолжить выполнение до завершения текущей функции, быстрая клавиша Shift+F11.
Продолжает выполнение и останавливает его в самой последней строке текущей функции. Это удобно, когда мы случайно вошли во вложенный вызов, используя , но это нас не интересует, и мы хотим продолжить его до конца как можно скорее.

 – активировать/деактивировать все точки останова(breakpoints).
Эта кнопка не влияет на выполнение кода, она лишь позволяет массово включить/отключить точки останова.

 – включить/отключить автоматическую паузу в случае ошибки.
При включении, если открыты инструменты разработчика, ошибка при выполнении скрипта автоматически приостанавливает его. Затем мы можем проанализировать переменные в отладчике, чтобы понять, что пошло не так. Поэтому, если наш скрипт умирает с ошибкой, мы можем открыть отладчик, включить эту опцию и перезагрузить страницу, чтобы увидеть, где он умирает и каков контекст в этот момент.